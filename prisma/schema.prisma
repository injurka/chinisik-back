generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

//* ==== Models ==================================================================== *//

model User {
  id         Int      @id @unique @default(autoincrement())
  email      String?  @unique
  name       String?
  password   String?
  avatarUrl  String?

  githubId   String? @unique
  googleId   String? @unique

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  UserPermission UserPermission[]

  @@map(name: "user")

  refreshTokens RefreshToken[]
  LinguisticAnalysisBase LinguisticAnalysisBase[]
  LinguisticAnalysisError LinguisticAnalysisError[]
}

model RefreshToken {
  id           Int      @id @unique @default(autoincrement())
  token        String   @unique
  userId       Int
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map(name: "refresh_tokens")
}

model UserPermission {
  id         Int        @id @unique @default(autoincrement())
  userId     Int
  permission Permission

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "user_permission")
}

model EmailVerificationCode {
  id    Int    @id @default(autoincrement())
  email String
  code  String
}

model HieroglyphKey {
  id            Int     @id @default(autoincrement())
  index         Int
  glyph         String
  alternative   String?
  pinyin        String
  translate     String
  transcription String
  toneType      Int
  toneIndex     Int

  @@map(name: "hieroglyph_key")
}

model Cms {
  id      Int     @id @default(autoincrement())
  sysname String? @unique
  value   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "cms")
}

//* ==== SplitGlyphs ==================================================================== *//

model SplitGlyphsAll {
  id    Int    @id @unique @default(autoincrement())
  type  String
  glyph String
  data  Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "split_glyphs_all")
}

model SplitGlyphsHieroglyph {
  id            Int    @id @unique @default(autoincrement())
  glyph         String @unique
  pinyin        String
  toneType      Int
  toneIndex     Int
  transcription String
  translate     Json

  keys      SplitGlyphsHieroglyphKeys[]
  words     SplitGlyphsWordHieroglyphs[]
  sentences SplitGlyphsSentenceHieroglyphs[]

  @@map(name: "split_glyphs_hieroglyph")
}

model SplitGlyphsHieroglyphKeys {
  id           Int @id @unique @default(autoincrement())
  order        Int
  hieroglyphId Int
  keyId        Int

  hieroglyph SplitGlyphsHieroglyph @relation(fields: [hieroglyphId], references: [id])

  @@index([hieroglyphId])
  @@map(name: "split_glyphs_keys")
}

model SplitGlyphsWord {
  id            Int    @id @unique @default(autoincrement())
  glyph         String @unique
  translate     String
  transcription String
  pinyin        Json

  hieroglyphs SplitGlyphsWordHieroglyphs[]
  sentences   SplitGlyphsSentenceWords[]
  @@map(name: "split_glyphs_word")
}

model SplitGlyphsWordHieroglyphs {
  id           Int @id @unique @default(autoincrement())
  order        Int
  hieroglyphId Int
  wordId       Int

  hieroglyph SplitGlyphsHieroglyph @relation(fields: [hieroglyphId], references: [id])
  word       SplitGlyphsWord       @relation(fields: [wordId], references: [id])

  @@index([hieroglyphId])
  @@index([wordId])
  @@map(name: "split_glyphs_word_hieroglyph")
}

model SplitGlyphsSentence {
  id            Int    @id @unique @default(autoincrement())
  glyph         String @unique
  translate     String
  transcription String
  pinyin        Json

  words       SplitGlyphsSentenceWords[]
  hieroglyphs SplitGlyphsSentenceHieroglyphs[]

  @@map(name: "split_glyphs_sentence")
}

model SplitGlyphsSentenceWords {
  id         Int @id @unique @default(autoincrement())
  order      Int
  sentenceId Int
  wordId     Int

  sentence SplitGlyphsSentence @relation(fields: [sentenceId], references: [id])
  word     SplitGlyphsWord     @relation(fields: [wordId], references: [id])

  @@index([sentenceId])
  @@index([wordId])
  @@map(name: "split_glyphs_words")
}

model SplitGlyphsSentenceHieroglyphs {
  id           Int @id @unique @default(autoincrement())
  order        Int
  sentenceId   Int
  hieroglyphId Int

  sentence   SplitGlyphsSentence   @relation(fields: [sentenceId], references: [id])
  hieroglyph SplitGlyphsHieroglyph @relation(fields: [hieroglyphId], references: [id])

  @@index([sentenceId])
  @@index([hieroglyphId])
  @@map(name: "split_glyphs_sentence_hieroglyphs")
}

//* ==== LinguisticAnalysis ======================================================== *//

model LinguisticAnalysisBase {
  id                 Int    @id @unique @default(autoincrement())
  type               String
  userId             Int
  model              String
  sourceValue        String
  glyph              String
  totalTokens        Int
  generationDuration Int
  dataType           LinguisticAnalysisDataType
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  jsonAnalysis     LinguisticAnalysisJson?
  markdownAnalysis LinguisticAnalysisMarkdown?

  @@index([userId])
  @@map(name: "linguistic_analysis_base")
}

model LinguisticAnalysisJson {
  id                 Int    @id @unique
  data               Json

  base               LinguisticAnalysisBase @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map(name: "linguistic_analysis_json")
}

model LinguisticAnalysisMarkdown {
  id                 Int    @id @unique
  data               String

  base               LinguisticAnalysisBase @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map(name: "linguistic_analysis_markdown")
}

enum LinguisticAnalysisDataType {
  Markdown
  Json
}

model LinguisticAnalysisError {
  id             Int    @id @unique @default(autoincrement())
  userId         Int
  model          String
  sourceValue    String
  error          String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "linguistic_nalysis_error")
}

//* ==== HSK ======================================================================= *//

model HieroglyphHsk {
  id                Int     @id @default(autoincrement())
  glyph             String
  traditionalGlyph  String
  level             Int
  
  translation       Json
  pinyin            Json

  @@map(name: "hieroglyph_hsk")
}


//* ==== Pinyin ==================================================================== *//

model PinyinFinal {
  id   Int    @id @default(autoincrement())
  name String
  pos  Int

  finalsTones PinyinFinalsTone[]

  @@map(name: "pinyin_final")
}

model PinyinInitial {
  id   Int    @id @default(autoincrement())
  name String
  pos  Int

  initialsFinals PinyinInitialsFinals[]
  
  @@map(name: "pinyin_initial")
}

model PinyinFinalsTone {
  id       Int    @id @default(autoincrement())
  name     String
  toneType Int // Assuming ToneType is mapped to Int in Prisma
  finalId  Int

  final          PinyinFinal            @relation(fields: [finalId], references: [id])
  initialsFinals PinyinInitialsFinals[]

  @@index([finalId])
  @@map(name: "pinyin_finals_tone")
}

model PinyinInitialsFinals {
  id          Int  @id @default(autoincrement())
  initialId   Int?
  finalToneId Int

  initial   PinyinInitial?   @relation(fields: [initialId], references: [id])
  finalTone PinyinFinalsTone @relation(fields: [finalToneId], references: [id])

  @@index([finalToneId])
  @@index([initialId])
  @@map(name: "pinyin_initial_finals")
}


//* ==== Enums ==================================================================== *//

enum Permission {
  AiGenerate
}

